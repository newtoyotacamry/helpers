local Players       = game:GetService("Players")
local HttpService   = game:GetService("HttpService")
local requestFunction = (syn and syn.request)
                     or (http and http.request)
                     or http_request
                     or request
if not requestFunction then return end
local url    = "https://api.botghost.com/webhook/1349573134407438/outxr5yrakjz3n5uffzj"
local apiKey = "05c5187fefaf41080d936c37c747deff3bd42cbad42ae186b87303dfd0cadc88"
local spawners      = workspace:WaitForChild("BossSpawners")
local shoSpawn      = spawners:WaitForChild("ShoBossSpawn")
local captainSpawn  = spawners:WaitForChild("CaptainBurnsBossSpawn")
local vengefulSpawn = spawners:WaitForChild("VengefulBossSpawn")
local shoActiveBool     = shoSpawn:WaitForChild("Active")
local captainActiveBool = captainSpawn:WaitForChild("Active")
local vengefulActiveBool= vengefulSpawn:WaitForChild("Active")
local player      = Players.LocalPlayer
local regionLabel = player:WaitForChild("PlayerGui")
    :WaitForChild("TopbarStandard")
    :WaitForChild("Holders")
    :WaitForChild("Left")
    :WaitForChild("Widget")
    :WaitForChild("IconButton")
    :WaitForChild("Menu")
    :WaitForChild("IconSpot")
    :WaitForChild("Contents")
    :WaitForChild("IconLabelContainer")
    :WaitForChild("IconLabel")
local joinScript = string.format(
    'game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s", game.Players.LocalPlayer)',
    game.PlaceId, game.JobId
)
local function getPercent(spawn)
    local frame = spawn:WaitForChild("BillboardGui")
                      :WaitForChild("RespawnFrame")
                      :WaitForChild("CurrentProgressFrame")
    return frame.Size.X.Scale * 100
end
local function getMilestone(pct)
    if pct > 90 then      return "90"
    elseif pct > 75 then  return "75"
    else                  return "false"
    end
end
local function buildAllVars()
    local shoPct = getPercent(shoSpawn)
    local capPct = getPercent(captainSpawn)
    local venPct = getPercent(vengefulSpawn)
    local currentPlayers = #Players:GetPlayers()
    local maxPlayers     = Players.MaxPlayers or 0
    local region         = regionLabel.Text
    local timestamp      = os.date("%Y-%m-%d %H:%M:%S")

    return {
        { name="shoActive",      variable="{shoActive}",      value=tostring(shoActiveBool.Value)      },
        { name="captainActive",  variable="{captainActive}",  value=tostring(captainActiveBool.Value)  },
        { name="vengefulActive", variable="{vengefulActive}", value=tostring(vengefulActiveBool.Value) },

        { name="shoPercent",     variable="{shoPercent}",     value=string.format("%.2f", shoPct)      },
        { name="captainPercent", variable="{captainPercent}", value=string.format("%.2f", capPct)      },
        { name="vengefulPercent",variable="{vengefulPercent}",value=string.format("%.2f", venPct)      },

        { name="shoMilestone",     variable="{shoMilestone}",     value=getMilestone(shoPct)   },
        { name="captainMilestone", variable="{captainMilestone}", value=getMilestone(capPct)   },
        { name="vengefulMilestone",variable="{vengefulMilestone}",value=getMilestone(venPct)   },

        { name="joinScript",      variable="{joinScript}",      value=joinScript                },
        { name="currentPlayers",  variable="{currentPlayers}",  value=tostring(currentPlayers) },
        { name="maxPlayers",      variable="{maxPlayers}",      value=tostring(maxPlayers)     },
        { name="region",          variable="{region}",          value=region                   },

        { name="timestamp",       variable="{timestamp}",       value=timestamp                },
    }
end
local function buildTracked()
    local all = buildAllVars()
    local tracked = {}
    for _, v in ipairs(all) do
        if v.name == "shoActive"
        or v.name == "captainActive"
        or v.name == "vengefulActive"
        or v.name == "shoMilestone"
        or v.name == "captainMilestone"
        or v.name == "vengefulMilestone" then
            table.insert(tracked, v)
        end
    end
    return tracked
end
local function shouldSend(old, new)
    for i = 1, #old do
        local o, n = old[i].value, new[i].value
        if old[i].name:find("Active") then
            if o == "false" and n == "true" then
                return true
            end
        end
        if old[i].name:find("Milestone") then
            if o ~= n and (n == "75" or n == "90") then
                return true
            end
        end
    end
    return false
end
local function sendLog(vars)
    requestFunction({
        Url     = url,
        Method  = "POST",
        Headers = {
            ["Authorization"] = apiKey,
            ["Content-Type"]  = "application/json",
        },
        Body = HttpService:JSONEncode({ variables = vars }),
    })
end
local lastTracked = buildTracked()
sendLog(buildAllVars())
task.spawn(function()
    while true do
        task.wait(10)
        local nowTracked = buildTracked()
        if shouldSend(lastTracked, nowTracked) then
            lastTracked = nowTracked
            sendLog(buildAllVars())
        end
    end
end)
